[{"D:\\project\\test_final_backend\\src\\index.js":"1","D:\\project\\test_final_backend\\src\\components\\App.js":"2","D:\\project\\test_final_backend\\src\\components\\Route.js":"3","D:\\project\\test_final_backend\\src\\components\\GlobalStyles.js":"4","D:\\project\\test_final_backend\\src\\components\\Header.js":"5","D:\\project\\test_final_backend\\src\\router\\Home\\index.js":"6","D:\\project\\test_final_backend\\src\\router\\Admin\\index.js":"7","D:\\project\\test_final_backend\\src\\router\\Lda\\index.js":"8","D:\\project\\test_final_backend\\src\\router\\Model\\index.js":"9","D:\\project\\test_final_backend\\src\\router\\Admin\\AdminContainer.js":"10","D:\\project\\test_final_backend\\src\\router\\Home\\HomeContainer.js":"11","D:\\project\\test_final_backend\\src\\router\\Model\\ModelContainer.js":"12","D:\\project\\test_final_backend\\src\\router\\Lda\\LdaContainer.js":"13","D:\\project\\test_final_backend\\src\\router\\Admin\\AdminPresenter.js":"14","D:\\project\\test_final_backend\\src\\router\\Home\\HomePresenter.js":"15","D:\\project\\test_final_backend\\src\\api.js":"16","D:\\project\\test_final_backend\\src\\router\\Model\\ModelPresenter.js":"17","D:\\project\\test_final_backend\\src\\router\\Lda\\LdaPresenter.js":"18","D:\\project\\test_final_backend\\src\\components\\Article.js":"19","D:\\project\\test_final_backend\\src\\components\\Loader.js":"20","D:\\project\\test_final_backend\\src\\components\\Table1.js":"21"},{"size":396,"mtime":1612914616058,"results":"22","hashOfConfig":"23"},{"size":415,"mtime":1612914616055,"results":"24","hashOfConfig":"23"},{"size":734,"mtime":1612914616056,"results":"25","hashOfConfig":"23"},{"size":596,"mtime":1612915926040,"results":"26","hashOfConfig":"23"},{"size":1828,"mtime":1612914616056,"results":"27","hashOfConfig":"23"},{"size":78,"mtime":1612914616061,"results":"28","hashOfConfig":"23"},{"size":80,"mtime":1612914616059,"results":"29","hashOfConfig":"23"},{"size":75,"mtime":1612914616062,"results":"30","hashOfConfig":"23"},{"size":81,"mtime":1612914616064,"results":"31","hashOfConfig":"23"},{"size":193,"mtime":1612914616059,"results":"32","hashOfConfig":"23"},{"size":4431,"mtime":1612934398135,"results":"33","hashOfConfig":"23"},{"size":7607,"mtime":1612938728777,"results":"34","hashOfConfig":"23"},{"size":7664,"mtime":1612938728405,"results":"35","hashOfConfig":"23"},{"size":147,"mtime":1612914616059,"results":"36","hashOfConfig":"23"},{"size":3308,"mtime":1612934873363,"results":"37","hashOfConfig":"23"},{"size":1485,"mtime":1612932727722,"results":"38","hashOfConfig":"23"},{"size":2873,"mtime":1612934803769,"results":"39","hashOfConfig":"23"},{"size":2884,"mtime":1612938812291,"results":"40","hashOfConfig":"23"},{"size":3026,"mtime":1612934007586,"results":"41","hashOfConfig":"23"},{"size":383,"mtime":1612914616056,"results":"42","hashOfConfig":"23"},{"size":1054,"mtime":1612921749101,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"9qwo7n",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},"D:\\project\\test_final_backend\\src\\index.js",[],["95","96"],"D:\\project\\test_final_backend\\src\\components\\App.js",["97"],"import Route from './Route';\r\nimport GlobalStyles from './GlobalStyles';\r\nfunction App() {\r\n  // 함수 최초 설정\r\n  Date.prototype.getWeek = function() {\r\n    var onejan = new Date(this.getFullYear(),0,1);\r\n    return Math.ceil((((this - onejan) / 86400000) + onejan.getDay()+1)/7);\r\n}\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalStyles />\r\n     <Route />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\project\\test_final_backend\\src\\components\\Route.js",[],"D:\\project\\test_final_backend\\src\\components\\GlobalStyles.js",[],"D:\\project\\test_final_backend\\src\\components\\Header.js",[],"D:\\project\\test_final_backend\\src\\router\\Home\\index.js",[],"D:\\project\\test_final_backend\\src\\router\\Admin\\index.js",[],"D:\\project\\test_final_backend\\src\\router\\Lda\\index.js",[],"D:\\project\\test_final_backend\\src\\router\\Model\\index.js",[],"D:\\project\\test_final_backend\\src\\router\\Admin\\AdminContainer.js",[],"D:\\project\\test_final_backend\\src\\router\\Home\\HomeContainer.js",["98","99","100","101","102"],"import {useEffect, useState, useRef} from 'react';\r\nimport HomePresenter from './HomePresenter';\r\nconst HomeContainer = () => {    \r\n    const initialDoc = {\r\n        \"year\"  : new Date().getFullYear(),\r\n        \"month\" : new Date().getMonth() +1,\r\n        \"week\"  : new Date().getWeek() -1,\r\n        \"graphSort\" : \"\"\r\n    }\r\n\r\n    // 일자 설정 - db에서는 날짜 설정시 한자리 수가 없다.\r\n    if(initialDoc['month'].toString().length == 1){\r\n        initialDoc['month'] = '0' + initialDoc['month'].toString();\r\n    }\r\n    if(initialDoc['week'].toString().length == 1){\r\n        initialDoc['week'] = '0' + initialDoc['week'].toString();\r\n    }\r\n\r\n    // state 설정\r\n    const [searchDate, setSearchDate] = useState(new Date());        \r\n    const [period, setPeriod]         = useState(\"week\");\r\n    const [condition1, setCondition1] = useState({...initialDoc, \"graphSort\": \"dataOccur\"});\r\n    const [condition2, setCondition2] = useState({...initialDoc, \"graphSort\": \"dataFlow\"});\r\n    const [condition3, setCondition3] = useState({...initialDoc, \"graphSort\": \"categoryOccur\"});\r\n    const [condition4, setCondition4] = useState({...initialDoc, \"graphSort\": \"categoryComparison\"});\r\n    const dateRef = useRef(null);\r\n    \r\n\r\n    // 검색 기간 업데이트 함수\r\n    const _handler_on_period = (e) =>{        \r\n        \r\n        setPeriod(e.target.value);        \r\n        const value = e.target.value;\r\n\r\n        // 기간선택에 따른 date component 수정\r\n        if (value === 'week'){\r\n            dateRef.current.type='date';\r\n        }else if (value === 'year'){\r\n            // 년도 제한설정\r\n            dateRef.current.type='number';\r\n            dateRef.current.min='2000';\r\n            dateRef.current.max='2099';\r\n            dateRef.current.step='1';\r\n            dateRef.current.default='2000';            \r\n        }else{\r\n            dateRef.current.type='month';\r\n        }\r\n    }\r\n    \r\n    // 검색 날짜 업데이트 함수\r\n    const _handler_on_date = (e) => {\r\n        setSearchDate(e.target.value);        \r\n    }\r\n    \r\n    // condition 새로 설정함으로써 각 article component rerendering\r\n    const searchPlot = async (e) => {\r\n        e.preventDefault();               \r\n        const date = new Date(searchDate);\r\n        const new_doc = {};            \r\n        switch (period ){\r\n            case 'week':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['week']  = date.getWeek() -1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'month':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'year':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['period'] = period;\r\n                break;\r\n        }\r\n        if(new_doc['month'].toString().length == 1){\r\n            new_doc['month'] = '0' + new_doc['month'].toString();\r\n        }\r\n        if(new_doc['week'].toString().length == 1){\r\n            new_doc['week'] = '0' + new_doc['week'].toString();\r\n        }\r\n        new_doc['graphSort'] = condition1['graphSort'];\r\n        setCondition1({...new_doc});\r\n        new_doc['graphSort'] = condition2['graphSort'];\r\n        setCondition2({...new_doc});\r\n        new_doc['graphSort'] = condition3['graphSort'];\r\n        setCondition3({...new_doc});\r\n        new_doc['graphSort'] = condition4['graphSort'];\r\n        setCondition4({...new_doc});       \r\n    }\r\n\r\n    useEffect( ()=> {\r\n        const date = new Date();\r\n        setSearchDate(date);\r\n\r\n    }, []);\r\n    \r\n    return (<HomePresenter searchPlot         = {searchPlot}\r\n                           dateRef            = {dateRef}\r\n                           period             = {period}\r\n                           _handler_on_period = {_handler_on_period}\r\n                           searchDate         = {searchDate}\r\n                           _handler_on_date   = {_handler_on_date}\r\n                           condition1         = {condition1}\r\n                           condition2         = {condition2}\r\n                           condition3         = {condition3}\r\n                           condition4         = {condition4}\r\n            />);\r\n}\r\n\r\nexport default HomeContainer;","D:\\project\\test_final_backend\\src\\router\\Model\\ModelContainer.js",["103","104","105","106","107","108","109","110"],"import {useEffect, useState, useRef} from 'react';\r\nimport { serverApi } from '../../api';\r\nimport ModelPresenter from './ModelPresenter';\r\nconst ModelContainer = () => {    \r\n    const initialDoc = {\r\n        \"year\"  : new Date().getFullYear(),\r\n        \"month\" : new Date().getMonth() +1,\r\n        \"week\"  : new Date().getWeek() -1,\r\n        \"graphSort\" : \"\"\r\n    }\r\n\r\n    // 일자 설정 - db에서는 날짜 설정시 한자리 수가 없다.\r\n    if(initialDoc['month'].toString().length == 1){\r\n        initialDoc['month'] = '0' + initialDoc['month'].toString();\r\n    }\r\n    if(initialDoc['week'].toString().length == 1){\r\n        initialDoc['week'] = '0' + initialDoc['week'].toString();\r\n    }\r\n\r\n    const [searchDate, setSearchDate] = useState(new Date());        \r\n    const [period,     setPeriod]     = useState(\"week\");\r\n    const [condition1, setCondition1] = useState({...initialDoc, \"graphSort\": \"dataModelWork\"});\r\n    const [condition2, setCondition2] = useState({...initialDoc, \"graphSort\": \"dataModelTable\"});\r\n    const [state,      setState]      = useState({\r\n        result:{columns:\"\", data:\"\"},\r\n        error:\"\",\r\n        loading:true\r\n    });\r\n    const dateRef = useRef(null);\r\n    \r\n    // 검색 기간 업데이트 함수\r\n    const _handler_on_period = (e) =>{\r\n        // 선택된 기간에 따라 date input 조절\r\n        setPeriod(e.target.value);\r\n        const value = e.target.value;\r\n        if (value === 'week'){\r\n            dateRef.current.type='date';\r\n        }else if (value === 'year'){\r\n            // 년도 제한설정\r\n            dateRef.current.type='number';\r\n            dateRef.current.min='2000';\r\n            dateRef.current.max='2099';\r\n            dateRef.current.step='1';\r\n            dateRef.current.default='2000';\r\n        }else{\r\n            dateRef.current.type='month';\r\n        }\r\n\r\n    }    \r\n    // 검색 날짜 업데이트 함수\r\n    const _handler_on_date = (e) => {\r\n        setSearchDate(e.target.value);\r\n    }\r\n    // Data.protype에 주차 구하는 새로운 함수 생성\r\n\r\n    const searchPlot = async (e) => {\r\n        e.preventDefault();\r\n        const date = new Date(searchDate);\r\n        const new_doc = {};\r\n        switch (period ){\r\n            case 'week':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['week']  = date.getWeek() -1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'month':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'year':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['period'] = period;\r\n                break;\r\n        }\r\n        // 달, 주는 1자리 수 일 경우 무고전\r\n        if(new_doc['month'].toString().length == 1){\r\n            new_doc['month'] = '0' + new_doc['month'].toString();\r\n        }\r\n        if(new_doc['week'].toString().length == 1){\r\n            new_doc['week'] = '0' + new_doc['week'].toString();\r\n        }\r\n        // 검색조건 새로 배정\r\n        new_doc['graphSort'] = condition1['graphSort'];\r\n        setCondition1({...new_doc});\r\n        new_doc['graphSort'] = condition2['graphSort'];\r\n        setCondition2({...new_doc});   \r\n\r\n        new_doc['graphSort'] = \"dataModelTable\"\r\n        searchTable(new_doc);\r\n    }\r\n    // 날짜 formatter\r\n    const dateFormatter = (cell, row) => {\r\n        const date = new Date(cell)\r\n        return(\r\n            <span>\r\n                {date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate() }\r\n            </span>\r\n        )\r\n    }\r\n    // category formatter\r\n    const categoryFormatter = (cell, row) => {\r\n        let category =\"\";\r\n        switch(cell){\r\n            case 0: category = \"CPU/메인보드 / 램\"\r\n                break;\r\n            case 1: category = \"그래픽카드\"\r\n                break;\r\n            case 2: category = \"공랭/수랭쿨러\"\r\n                break;\r\n            case 3: category = \"SSD/HDD/USB\"\r\n                break;\r\n            case 4: category = \"모니터/TV\"\r\n                break;\r\n            case 5: category = \"네트워크/인터넷\"\r\n                break;\r\n            case 6: category = \"OS/소프트웨어\"\r\n                break;\r\n            case 7: category = \"파워서플라이\"\r\n                break;\r\n            case 8: category = \"키보드/마우스\"\r\n                break;\r\n            case 9: category = \"오버클러킹\"\r\n                break;\r\n        }        \r\n        return(\r\n            <span>\r\n                {category}\r\n            </span>\r\n        )\r\n    }        \r\n    // table column style\r\n    const headerStyle = {\r\n        width:'50px',\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"skyblue\"\r\n    }\r\n    const headerStyle2 = {\r\n        width:'200px',\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"skyblue\"\r\n    }\r\n    const columnStyle = {\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"white\"\r\n    }\r\n\r\n    // model 활동 내역 table 조회\r\n    const searchTable = async (condition) => {\r\n        let result = null;\r\n        try {\r\n            ({data:result} = await serverApi.getModelTable(condition));\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }finally{\r\n            if( result !== null){\r\n                console.log('confirm');                                \r\n                const columns = [\r\n                    {dataField: 'key_value', text: '행렬번호', hidden:true},         \r\n                    {dataField: 'datetime', text: '작성시간', formatter:dateFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'label', text: '기존 category', formatter:categoryFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'prediction', text: '모델 지정 category', formatter:categoryFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'content', text: '작성내용', style:columnStyle, sort:true,\r\n                     headerStyle: headerStyle2, style:columnStyle}                    \r\n                ]\r\n                result.column= columns;\r\n                console.log((result.product ));                                \r\n                setState({result ,loading:false});\r\n            }            \r\n        }\r\n    }\r\n\r\n    // 최초에는 최근 일자만 검색\r\n    useEffect( ()=> {\r\n        const date = new Date();\r\n        setSearchDate(date);\r\n        let new_doc = {};\r\n        new_doc['year']  = date.getFullYear();\r\n        new_doc['month'] = date.getMonth();\r\n        new_doc['week']  = date.getWeek();\r\n        searchTable(new_doc);\r\n    }, []);\r\n    \r\n    return (<ModelPresenter searchPlot         = {searchPlot}\r\n                            dateRef            = {dateRef}\r\n                            period             = {period}\r\n                            _handler_on_period = {_handler_on_period}\r\n                            searchDate         = {searchDate}\r\n                            _handler_on_date   = {_handler_on_date}\r\n                            condition1         = {condition1}\r\n                            condition2         = {condition2}\r\n                            state              = {state}\r\n\r\n            />);\r\n}\r\n\r\nexport default ModelContainer;","D:\\project\\test_final_backend\\src\\router\\Lda\\LdaContainer.js",["111","112","113","114","115","116","117","118"],"import {useEffect, useState, useRef} from 'react';\r\nimport { serverApi } from '../../api';\r\nimport LdaPresenter from './LdaPresenter';\r\nconst LdaContainer = () => {    \r\n    const initialDoc = {\r\n        \"year\"  : new Date().getFullYear(),\r\n        \"month\" : new Date().getMonth() +1,\r\n        \"week\"  : new Date().getWeek() -1,\r\n        \"graphSort\" : \"\"\r\n    }\r\n\r\n    // 일자 설정 - db에서는 날짜 설정시 한자리 수가 없다.\r\n    if(initialDoc['month'].toString().length == 1){\r\n        initialDoc['month'] = '0' + initialDoc['month'].toString();\r\n    }\r\n    if(initialDoc['week'].toString().length == 1){\r\n        initialDoc['week'] = '0' + initialDoc['week'].toString();\r\n    }\r\n\r\n    const [searchDate, setSearchDate] = useState(new Date());        \r\n    const [period,     setPeriod]     = useState(\"week\");\r\n    const [condition1, setCondition1] = useState({...initialDoc, \"graphSort\": \"dataLdaScatter\"});\r\n    const [condition2, setCondition2] = useState({...initialDoc, \"graphSort\": \"dataLdaTable\"});\r\n    const [state,      setState]      = useState({\r\n        result:{columns:\"\", data:\"\"},\r\n        error:\"\",\r\n        loading:true\r\n    })\r\n    const dateRef = useRef(null);\r\n    \r\n    // 검색 기간 업데이트 함수\r\n    const _handler_on_period = (e) =>{\r\n        // 선택된 기간에 따라 date input 조절\r\n        setPeriod(e.target.value);\r\n        const value = e.target.value;\r\n        if (value === 'week'){\r\n            dateRef.current.type='date';\r\n        }else if (value === 'year'){\r\n            // 년도 제한설정\r\n            dateRef.current.type='number';\r\n            dateRef.current.min='2000';\r\n            dateRef.current.max='2099';\r\n            dateRef.current.step='1';\r\n            dateRef.current.default='2000';\r\n        }else{\r\n            dateRef.current.type='month';\r\n        }\r\n        \r\n    }    \r\n    // 검색 날짜 업데이트 함수\r\n    const _handler_on_date = (e) => {\r\n        setSearchDate(e.target.value);\r\n    }\r\n    // Data.protype에 주차 구하는 새로운 함수 생성\r\n\r\n    const searchPlot = async (e) => {\r\n        e.preventDefault();\r\n        const date = new Date(searchDate);\r\n        const new_doc = {};\r\n        switch (period ){\r\n            case 'week':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['week']  = date.getWeek() -1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'month':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['month'] = date.getMonth() +1;\r\n                new_doc['period'] = period;\r\n                break;\r\n            case 'year':\r\n                new_doc['year']  = date.getFullYear();\r\n                new_doc['period'] = period;\r\n                break;\r\n        }\r\n        // 달, 주는 1자리 수 일 경우 무고전\r\n        if(new_doc['month'].toString().length == 1){\r\n            new_doc['month'] = '0' + new_doc['month'].toString();\r\n        }\r\n        if(new_doc['week'].toString().length == 1){\r\n            new_doc['week'] = '0' + new_doc['week'].toString();\r\n        }\r\n\r\n        // 검색조건 새로 배정\r\n        new_doc['graphSort'] = condition1['graphSort'];\r\n        setCondition1({...new_doc});\r\n        new_doc['graphSort'] = condition2['graphSort'];\r\n        setCondition2({...new_doc});   \r\n\r\n        new_doc['graphSort'] = \"dataLdaTable\"\r\n        searchTable(new_doc);\r\n    }\r\n    // 날짜 formatter\r\n    const dateFormatter = (cell, row) => {\r\n        const date = new Date(cell)\r\n        return(\r\n            <span>\r\n                {date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate() }\r\n            </span>\r\n        )\r\n    }\r\n    // category formatter\r\n    const categoryFormatter = (cell, row) => {\r\n        let category =\"\";\r\n        switch(cell){\r\n            case 0: category = \"CPU/메인보드 / 램\"\r\n                break;\r\n            case 1: category = \"그래픽카드\"\r\n                break;\r\n            case 2: category = \"공랭/수랭쿨러\"\r\n                break;\r\n            case 3: category = \"SSD/HDD/USB\"\r\n                break;\r\n            case 4: category = \"모니터/TV\"\r\n                break;\r\n            case 5: category = \"네트워크/인터넷\"\r\n                break;\r\n            case 6: category = \"OS/소프트웨어\"\r\n                break;\r\n            case 7: category = \"파워서플라이\"\r\n                break;\r\n            case 8: category = \"키보드/마우스\"\r\n                break;\r\n            case 9: category = \"오버클러킹\"\r\n                break;\r\n        }        \r\n        return(\r\n            <span>\r\n                {category}\r\n            </span>\r\n        )\r\n    }        \r\n    // table column style\r\n    const headerStyle = {\r\n        width:'50px',\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"skyblue\"\r\n    }\r\n    const headerStyle2 = {\r\n        width:'200px',\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"skyblue\"\r\n    }\r\n    const columnStyle = {\r\n        fontSize:'0.8rem',\r\n        backgroundColor:\"white\"\r\n    }\r\n\r\n    // model 활동 내역 table 조회\r\n    const searchTable = async (condition) => {\r\n        let result = null;\r\n        try {\r\n            ({data:result} = await serverApi.getLdaTable(condition));\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }finally{\r\n            if( result !== null){\r\n                console.log('confirm');                                \r\n                const columns = [\r\n                    {dataField: 'key_value', text: '행렬번호', hidden:true},         \r\n                    {dataField: 'datetime', text: '작성시간', formatter:dateFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'label', text: '기존 category', formatter:categoryFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'prediction', text: '모델 지정 category', formatter:categoryFormatter, sort:true,\r\n                     headerStyle: headerStyle, style:columnStyle},\r\n                    {dataField: 'content', text: '작성내용', style:columnStyle, sort:true,\r\n                     headerStyle: headerStyle2, style:columnStyle}                    \r\n                ]\r\n                result.column= columns;\r\n                console.log((result.product ));                                \r\n                setState({result ,loading:false});\r\n            }            \r\n        }\r\n    }\r\n\r\n    useEffect( ()=> {\r\n        const date = new Date();\r\n        setSearchDate(date);\r\n        let new_doc = {};\r\n        new_doc['year']  = date.getFullYear();\r\n        new_doc['month'] = date.getMonth();\r\n        new_doc['week']  = date.getWeek();\r\n        new_doc['period'] = 'week';\r\n        new_doc['graphSort'] = \"dataLdaTable\"\r\n        console.log(new_doc);\r\n        searchTable(new_doc);\r\n    }, []);\r\n    \r\n    return (<LdaPresenter searchPlot          = {searchPlot}\r\n                           dateRef            = {dateRef}\r\n                           period             = {period}\r\n                           _handler_on_period = {_handler_on_period}\r\n                           searchDate         = {searchDate}\r\n                           _handler_on_date   = {_handler_on_date}\r\n                           condition1         = {condition1}\r\n                           condition2         = {condition2}\r\n                           state              = {state}\r\n\r\n            />);\r\n}\r\n\r\nexport default LdaContainer;","D:\\project\\test_final_backend\\src\\router\\Admin\\AdminPresenter.js",["119"],"import styled from 'styled-components';\r\n\r\n\r\nconst AdminPresenter = () => {\r\n    return (<div>\r\n\r\n    </div>);\r\n}\r\n\r\nexport default AdminPresenter;","D:\\project\\test_final_backend\\src\\router\\Home\\HomePresenter.js",[],"D:\\project\\test_final_backend\\src\\api.js",[],"D:\\project\\test_final_backend\\src\\router\\Model\\ModelPresenter.js",["120"],"import styled from 'styled-components';\r\nimport Article from '../../components/Article';\r\nimport Loader from '../../components/Loader';\r\nimport Table1 from '../../components/Table1';\r\n\r\nconst StyledDiv = styled.div`\r\n    padding-left:30px;\r\n`;\r\nconst StyledSection = styled.section`\r\n    display:grid;\r\n    grid-template-columns: 45em 50em;\r\n    grid-template-rows : 20em;\r\n    grid-row: auto;\r\n    grid-column-gap: 50px;    \r\n`;\r\nconst SubSection = styled.section`\r\n    padding-top: 10px;\r\n    display : flex;  \r\n    flex-direction:column;\r\n`\r\nconst InputLabel = styled.label`\r\n    align-items:flex-end;\r\n    font-size:1.2rem;\r\n`;\r\nconst StyledP = styled.p`\r\n    padding-bottom:5px;\r\n`;\r\nconst StyledForm = styled.form`\r\n    padding-top:15px;\r\n    display:flex;\r\n    flex-direction:row;\r\n    align-items:flex-end;\r\n`;\r\nconst ModelPresenter = ({searchPlot, \r\n                        dateRef,\r\n                        period,\r\n                        _handler_on_period,\r\n                        searchDate,                        \r\n                        _handler_on_date,\r\n                        condition1,\r\n                        condition2,\r\n                        state                  \r\n                    }) => {\r\n    const {result, error, loading} = state;\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <StyledForm onSubmit={searchPlot}>\r\n                <InputLabel htmlFor ='date'>기간 선택 </InputLabel>\r\n                <select id = 'opts' size='1' name='opts' value={period} onChange={_handler_on_period}>\r\n                    <option value='week' seleted=\"selected\">  week</option>\r\n                    <option value='month'>month</option>\r\n                    <option value='year'>year</option>\r\n                </select>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <InputLabel htmlFor ='date'>일자 선택 </InputLabel>\r\n                <input id='date' name='date' type='date' value ={searchDate} onChange={_handler_on_date} ref={dateRef}/>                                \r\n                <input type='submit' value='click'/>\r\n            </StyledForm>\r\n            <StyledSection>\r\n\r\n                <SubSection>\r\n                    <StyledP>모델 작업 통계 </StyledP>\r\n                    <Article id=\"dataModelScatter\" \r\n                             condition= {condition1}\r\n                             />\r\n                </SubSection>\r\n                <SubSection>\r\n                    {loading ? (<Loader />) : (\r\n                    <>\r\n                    <StyledP>모델 작업 내용 </StyledP>\r\n                    <Table1 \r\n                        result = {result}\r\n                    />\r\n                    </>\r\n                    )}\r\n                    \r\n                </SubSection>\r\n            </StyledSection>\r\n        </StyledDiv>            \r\n    );\r\n}\r\n\r\nexport default ModelPresenter;","D:\\project\\test_final_backend\\src\\router\\Lda\\LdaPresenter.js",["121"],"D:\\project\\test_final_backend\\src\\components\\Article.js",["122"],"import styled from 'styled-components';\r\nimport {useEffect, useState, useRef} from 'react';\r\nimport React from 'react-dom';\r\nimport {serverApi} from '../api';\r\nimport Loader from './Loader';\r\n\r\nconst StyledArticle = styled.article`\r\nborder-radius : 5px 0px 0px 5px;\r\nwidth: 100%;\r\nheight: 100%;\r\nz-index: 1;\r\ncolor:black;\r\nfont-size:1rem;\r\n`;\r\n\r\nconst Article = ({\r\n    id,    \r\n    condition\r\n    }) => {\r\n        // state 설정\r\n        const [loading, setLoading]        = useState(true);\r\n        const [error, setError]            = useState(\"\");\r\n        const [keyState, setKeyState]      = useState(\"\");\r\n        const [empty, setEmpty]            = useState(false);\r\n        const itSelf =  useRef(null);\r\n        // plot 화면에 띄우기\r\n        const showBokeh = (plot, div_id) => {\r\n            console.log(div_id, \"bokeh start\");        \r\n            window.Bokeh.embed.embed_item(plot, div_id);                                               \r\n        } \r\n\r\n        // plot load\r\n        const setPlot = async () => {\r\n            console.log(id, 'setplot function start'); \r\n\r\n            // 내부 변수           \r\n            let plot = null;\r\n            let empty = null;\r\n            setLoading(true);            \r\n            setKeyState(\"random\"); // key 설정만 새로 해줘도 tag 초기화 된다.\r\n            \r\n            try{                        \r\n                let response = await serverApi.getBokeh(condition);\r\n                console.log(id,'load data result',response === null);                \r\n                if( response !== null){\r\n                    ({data:{data:{empty}}} = response);                    \r\n                    if (!empty){\r\n                        setEmpty(false);\r\n                        ({data:{data:{plot:{plot}}}} = response);\r\n                        console.log(plot);\r\n                        showBokeh(plot, id);\r\n                    }else{\r\n                        setEmpty(true);\r\n                    }                                        \r\n                }                \r\n            }catch(err){\r\n                setError(err);     \r\n                console.log(error);\r\n            }finally{\r\n                setLoading(false);   \r\n                if (plot !== null){                    \r\n                    console.log(id, 'load complete');          \r\n                }\r\n            }            \r\n        }\r\n        // plot 설정\r\n        useEffect(()=>{          \r\n            console.log(id, 'rerender start');\r\n            setPlot();            \r\n        },[condition]);\r\n        return (\r\n            <>\r\n            {loading ? (<Loader />) : \r\n                empty ? (<p style={{color:'red'}}>데이터가 없습니다. 다른 기간을 입력해 주세요</p>) : (\r\n                <StyledArticle id={id}  \r\n                key={keyState}\r\n                ref= {itSelf}\r\n                >\r\n                </StyledArticle>\r\n                )\r\n            }\r\n            </>            \r\n    )\r\n}\r\n\r\nexport default Article;","D:\\project\\test_final_backend\\src\\components\\Loader.js",[],"D:\\project\\test_final_backend\\src\\components\\Table1.js",["123"],"import { useEffect } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nconst Table1 = (\r\n    {result}\r\n) => {\r\n    const {empty, column, product} = result;\r\n\r\n    const sizePerPageList = [\r\n        {text: 'All', value:5}\r\n    ];\r\n    const options = {\r\n        sizePerPageList\r\n    };\r\n    return <div>        \r\n        {empty ? (<>\r\n        <p> 해당하신 일자에는 데이터가 없습니다.</p>        \r\n        </>) : result && (\r\n            <BootstrapTable keyField='key_value' \r\n                            data={product}\r\n                            columns={ column }\r\n                            striped\r\n                            hover\r\n                            pagination={ paginationFactory(options) } /> \r\n        )}\r\n        \r\n        \r\n    </div>\r\n}\r\n\r\nexport default Table1",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":5,"column":3,"nodeType":"130","messageId":"131","endLine":8,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":12,"column":46,"nodeType":"134","messageId":"131","endLine":12,"endColumn":48},{"ruleId":"132","severity":1,"message":"133","line":15,"column":45,"nodeType":"134","messageId":"131","endLine":15,"endColumn":47},{"ruleId":"135","severity":1,"message":"136","line":60,"column":9,"nodeType":"137","messageId":"138","endLine":76,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":77,"column":47,"nodeType":"134","messageId":"131","endLine":77,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":80,"column":46,"nodeType":"134","messageId":"131","endLine":80,"endColumn":48},{"ruleId":"132","severity":1,"message":"133","line":13,"column":46,"nodeType":"134","messageId":"131","endLine":13,"endColumn":48},{"ruleId":"132","severity":1,"message":"133","line":16,"column":45,"nodeType":"134","messageId":"131","endLine":16,"endColumn":47},{"ruleId":"135","severity":1,"message":"136","line":60,"column":9,"nodeType":"137","messageId":"138","endLine":76,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":78,"column":47,"nodeType":"134","messageId":"131","endLine":78,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":81,"column":46,"nodeType":"134","messageId":"131","endLine":81,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":105,"column":9,"nodeType":"137","messageId":"138","endLine":126,"endColumn":10},{"ruleId":"139","severity":1,"message":"140","line":169,"column":49,"nodeType":"141","messageId":"131","endLine":169,"endColumn":54},{"ruleId":"142","severity":1,"message":"143","line":187,"column":8,"nodeType":"144","endLine":187,"endColumn":10,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"133","line":13,"column":46,"nodeType":"134","messageId":"131","endLine":13,"endColumn":48},{"ruleId":"132","severity":1,"message":"133","line":16,"column":45,"nodeType":"134","messageId":"131","endLine":16,"endColumn":47},{"ruleId":"135","severity":1,"message":"136","line":60,"column":9,"nodeType":"137","messageId":"138","endLine":76,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":78,"column":47,"nodeType":"134","messageId":"131","endLine":78,"endColumn":49},{"ruleId":"132","severity":1,"message":"133","line":81,"column":46,"nodeType":"134","messageId":"131","endLine":81,"endColumn":48},{"ruleId":"135","severity":1,"message":"136","line":106,"column":9,"nodeType":"137","messageId":"138","endLine":127,"endColumn":10},{"ruleId":"139","severity":1,"message":"140","line":170,"column":49,"nodeType":"141","messageId":"131","endLine":170,"endColumn":54},{"ruleId":"142","severity":1,"message":"143","line":190,"column":8,"nodeType":"144","endLine":190,"endColumn":10,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":1,"column":8,"nodeType":"149","messageId":"150","endLine":1,"endColumn":14},{"ruleId":"147","severity":1,"message":"151","line":44,"column":20,"nodeType":"149","messageId":"150","endLine":44,"endColumn":25},{"ruleId":"147","severity":1,"message":"151","line":45,"column":20,"nodeType":"149","messageId":"150","endLine":45,"endColumn":25},{"ruleId":"142","severity":1,"message":"152","line":70,"column":11,"nodeType":"144","endLine":70,"endColumn":22,"suggestions":"153"},{"ruleId":"147","severity":1,"message":"154","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":19},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-dupe-keys","Duplicate key 'style'.","ObjectExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchTable'. Either include it or remove the dependency array.","ArrayExpression",["157"],["158"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'setPlot'. Either include them or remove the dependency array.",["159"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [searchTable]",{"range":"165","text":"166"},{"range":"167","text":"166"},"Update the dependencies array to be: [condition, id, setPlot]",{"range":"168","text":"169"},[6625,6627],"[searchTable]",[6715,6717],[2503,2514],"[condition, id, setPlot]"]